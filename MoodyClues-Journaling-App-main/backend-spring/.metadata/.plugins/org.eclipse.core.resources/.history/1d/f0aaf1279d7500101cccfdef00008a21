package com.moodyclues.serviceimpl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;

import com.moodyclues.model.CounsellorUser;
import com.moodyclues.model.JournalUser;
import com.moodyclues.model.LinkRequest;
import com.moodyclues.model.LinkRequest.Status;
import com.moodyclues.repository.CounsellorRepository;
import com.moodyclues.repository.JournalUserRepository;
import com.moodyclues.repository.LinkRequestRepository;
import com.moodyclues.service.LinkRequestService;

import jakarta.persistence.EntityNotFoundException;
import jakarta.transaction.Transactional;

@Service
@Transactional
public class LinkRequestServiceImpl implements LinkRequestService {

	@Autowired
	LinkRequestRepository linkRepo;
	
	@Autowired
	JournalUserRepository juserRepo;
	
	@Autowired
	CounsellorRepository cRepo;
	

	@Override
	public LinkRequest createNewRequest(String counsellorId, String userEmail) {
        CounsellorUser counsellor = cRepo.findById(counsellorId)
                .orElseThrow(() -> new EntityNotFoundException("Counsellor not found"));

            JournalUser journal = juserRepo.findJournalUserByEmail(journalUserEmail)
                .orElseThrow(() -> new EntityNotFoundException("Journal user not found"));

            if (counsellor.getId().equals(journal.getId())) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Cannot link to self");
            }
            if (counsellor.getClients().contains(journal)) {
                throw new ResponseStatusException(HttpStatus.CONFLICT, "Already linked");
            }
            if (linkRepo.existsByCounsellor_IdAndJournalUser_IdAndStatus(
                    counsellorId, journal.getId(), Status.PENDING)) {
                throw new ResponseStatusException(HttpStatus.CONFLICT, "Pending request exists");
            }

            LinkRequest lr = new LinkRequest();
            lr.setCounsellorUser(counsellor);
            lr.setJournalUser(journal);
            lr.setStatus(Status.PENDING);
            return linkRepo.save(lr);
	}

	@Override
	public void requestDecision(String userId, String requestId, boolean approved) {
        LinkRequest lr = linkRepo.findByIdAndJournalUser_Id(requestId, journalUserId)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Request not found"));

            if (lr.getStatus() != Status.PENDING) {
                throw new ResponseStatusException(HttpStatus.CONFLICT, "Already decided");
            }

            if (approved) {
                lr.setStatus(Status.ACCEPTED);
                // Create link in join table
                CounsellorUser c = lr.getCounsellorUser();
                JournalUser j = lr.getJournalUser();
                c.getClients().add(j);
                j.getCounsellors().add(c);
                // Hibernate will flush join rows on commit
            } else {
                lr.setStatus(LinkRequestStatus.REJECTED);
            }	
		
	}
	
	@Override
	public List<LinkRequest> getAllLinkRequestsByCounsellorId(String id) {

		List<LinkRequest> requests = linkRepo.findAllByCounsellorId(id);
		
		return requests;
	}

	@Override
	public List<LinkRequest> getAllLinkRequestsByJournalUserId(String id) {
		
		List<LinkRequest> requests = linkRepo.findAllByJournalUserId(id);
		
		return requests;
	}


}
