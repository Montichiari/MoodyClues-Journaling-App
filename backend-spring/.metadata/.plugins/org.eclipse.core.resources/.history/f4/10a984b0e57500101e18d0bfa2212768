package com.moodyclues.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.moodyclues.dto.JournalEntryRequestDto;
import com.moodyclues.model.JournalEntry;
import com.moodyclues.service.EntryService;

import jakarta.servlet.http.HttpSession;

@RestController
@RequestMapping("/api/journal")
public class JournalController {

	@Autowired
	EntryService entryService;
	
	@PostMapping("/submit")
	public ResponseEntity<?> submitJournalEntry(@RequestBody JournalEntryRequestDto request) {
		
		try {
			entryService.submitEntry(request);
			return new ResponseEntity<>("Journal entry submitted successfully.", HttpStatus.OK);
		} catch (Exception e) {
			
		}
		
		return new ResponseEntity<>(HttpStatus.EXPECTATION_FAILED);
		
	}
	
	
	@GetMapping("/all/{userId}")
	public ResponseEntity<?> getAllJournalEntries(@PathVariable String userId) {
		
		try {
			List<JournalEntry> jentries = entryService.getAllJournalEntriesByUserId(userId);
			return new ResponseEntity<List<JournalEntry>>(jentries, HttpStatus.OK);
		} catch (Exception e) {
			
		}
		
		return new ResponseEntity<>(HttpStatus.NOT_FOUND);
	}
	
	@GetMapping("/entries")
	public ResponseEntity<List<JournalEntry>> listEntries(@RequestParam String query, HttpSession session) {

	    String userId = (String) session.getAttribute("id");
	    if (userId == null) return ResponseEntity.status(401).build();

	    List<JournalEntry> entries = entryService.searchJournalEntriesByTitle(userId, query);
	    

	    return new ResponseEntity<>(entries,HttpStatus.OK);
	}
	
	
	@GetMapping("/{entryId}/{userId}")
	public ResponseEntity<?> getJournalEntryById(@PathVariable String entryId,
	                                             @PathVariable String userId) {
	    try {
	        var jentry = entryService.getJournalEntryById(entryId);
	        if (jentry == null || jentry.getUser() == null || !userId.equals(jentry.getUser().getId())) {
	            return new ResponseEntity<>(HttpStatus.FORBIDDEN);
	        }
	        return new ResponseEntity<>(jentry, HttpStatus.OK);
	    } catch (Exception e) {
	        return new ResponseEntity<>(HttpStatus.NOT_FOUND);
	    }
	}
	
	
	@PutMapping("/{entryId}/{userId}/archive")
	public ResponseEntity<?> archiveJournalEntry(@PathVariable String entryId,
	                                             @PathVariable String userId) {
	    try {
	        JournalEntry j = entryService.getJournalEntryById(entryId);
	        if (j == null || j.getUser() == null || !userId.equals(j.getUser().getId())) {
	            return new ResponseEntity<>(HttpStatus.FORBIDDEN);
	        }
	        entryService.archiveJournalEntry(entryId);
	        return new ResponseEntity<>("Entry successfully deleted.", HttpStatus.OK);
	    } catch (Exception e) {
	        return new ResponseEntity<>(HttpStatus.NOT_FOUND);
	    }
	}
	
	
	
	
}
