name: Build & Deploy Backend

on:
  push:
    branches: [ "main" ]

concurrency:
  group: backend-deploy
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    env:
      APP_DIR: backend-spring/MoodyClues
      IMAGE_NAME: moodyclues-backend
      DH_USER: ${{ secrets.DOCKERHUB_USERNAME }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java (Temurin 17) with Maven cache
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: maven

      # --- Find Flyway migrations directory robustly ---
      - name: Locate Flyway migrations dir
        id: find_migrations
        run: |
          set -euo pipefail
          CANDIDATES=(
            "$GITHUB_WORKSPACE/${{ env.APP_DIR }}/src/main/resources/db/migration"
            "$GITHUB_WORKSPACE/backend-spring/src/main/resources/db/migration"
            "$GITHUB_WORKSPACE/src/main/resources/db/migration"
            "$GITHUB_WORKSPACE/${{ env.APP_DIR }}/src/main/resources/flyway"
          )
          for d in "${CANDIDATES[@]}"; do
            if [ -d "$d" ] && compgen -G "$d/*.sql" > /dev/null; then
              echo "dir=$d" >> "$GITHUB_OUTPUT"
              echo "Found migrations at: $d"
              exit 0
            fi
          done
          echo "::error::Could not find migrations folder. Checked: ${CANDIDATES[*]}"
          exit 1

      # --- Flyway migrate straight to RDS ---
      - name: Run Flyway migrations on RDS
        run: |
          docker run --rm \
            -v "${{ steps.find_migrations.outputs.dir }}":/flyway/sql \
            flyway/flyway:10 \
            -url="${{ secrets.RDS_JDBC_URL }}" \
            -user="${{ secrets.RDS_USERNAME }}" \
            -password="${{ secrets.RDS_PASSWORD }}" \
            -baselineOnMigrate=true \
            migrate

      # --- Build JAR ---
      - name: Build JAR (skip tests)
        working-directory: ${{ env.APP_DIR }}
        run: mvn -B -DskipTests package

      # --- Build & push Docker image ---
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ env.APP_DIR }}
          file: ./${{ env.APP_DIR }}/Dockerfile
          push: true
          tags: |
            ${{ env.DH_USER }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.DH_USER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      # --- SSH into EC2 and deploy container ---
      - name: Prepare SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_ec2
          chmod 600 ~/.ssh/id_ec2
          ssh-keyscan -H "${{ secrets.EC2_HOST }}" >> ~/.ssh/known_hosts

      - name: Deploy on EC2
        run: |
          ssh -i ~/.ssh/id_ec2 -o StrictHostKeyChecking=yes "${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}" bash -s << 'EOF'
          set -euo pipefail

          docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" -p "${{ secrets.DOCKERHUB_TOKEN }}"
          docker pull "${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"

          docker rm -f "${{ env.IMAGE_NAME }}" || true

          docker run -d \
            --name "${{ env.IMAGE_NAME }}" \
            --restart unless-stopped \
            -p 8080:8080 \
            -e SPRING_DATASOURCE_URL='${{ secrets.RDS_JDBC_URL }}' \
            -e SPRING_DATASOURCE_USERNAME='${{ secrets.RDS_USERNAME }}' \
            -e SPRING_DATASOURCE_PASSWORD='${{ secrets.RDS_PASSWORD }}' \
            "${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"

          docker image prune -f || true
          echo "Deployment complete."
          EOF
