name: Deploy to EC2 (build on runner, pull on EC2)

on:
  push:
    branches: [ "main" ]

concurrency:
  group: deploy-backend
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    env:
      APP_DIR: backend-spring/MoodyClues
      IMAGE_NAME: moodyclues-backend
      REGISTRY_USER: ${{ secrets.DOCKERHUB_USERNAME }}
      REGISTRY_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      EC2_HOST: ${{ secrets.EC2_PUBLIC_IP }}
      EC2_USER: ubuntu
      RDS_USERNAME: ${{ secrets.RDS_USERNAME }}
      RDS_PASSWORD: ${{ secrets.RDS_PASSWORD }}
      RDS_JDBC_URL: jdbc:mysql://moodyclues-db-1.c52ysku4cuy5.ap-southeast-1.rds.amazonaws.com:3306/moodyclues_db?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=Asia/Singapore

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      - name: Flyway migrate
        working-directory: ${{ env.APP_DIR }}
        run: |
          chmod +x mvnw
          ./mvnw -B -Dorg.slf4j.simpleLogger.log.org.flywaydb=debug \
            flyway:migrate \
            -Dflyway.user="${RDS_USERNAME}" \
            -Dflyway.password="${RDS_PASSWORD}" \
            -Dflyway.url="${RDS_JDBC_URL}"

      - name: Build Spring Boot JAR
        working-directory: ${{ env.APP_DIR }}
        run: ./mvnw -B -DskipTests clean package

      - name: Docker login
        run: echo "$REGISTRY_TOKEN" | docker login -u "$REGISTRY_USER" --password-stdin

      - name: Build & tag Docker image
        working-directory: ${{ env.APP_DIR }}
        env:
          SHORT_SHA: ${{ github.sha }}
        run: |
          SHORT="${SHORT_SHA:0:7}"
          IMAGE="$REGISTRY_USER/${IMAGE_NAME}"
          docker build -t "$IMAGE:$SHORT" -t "$IMAGE:latest" .
          echo "IMAGE_TAG_SHORT=$IMAGE:$SHORT" >> $GITHUB_ENV
          echo "IMAGE_TAG_LATEST=$IMAGE:latest" >> $GITHUB_ENV

      - name: Push Docker image
        run: |
          docker push "$IMAGE_TAG_SHORT"
          docker push "$IMAGE_TAG_LATEST"

      - name: Recreate SSH PEM key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" | base64 -d > key.pem
          chmod 600 key.pem

      - name: Check EC2 SSH port
        run: |
          echo "Checking SSH port..."
          nc -vz -w 10 "$EC2_HOST" 22 || (echo "Port 22 not reachable" && exit 2)

      - name: Deploy to EC2
        run: |
          ssh -T -i key.pem -o StrictHostKeyChecking=no "$EC2_USER@$EC2_HOST" << 'EOSSH'
          set -euo pipefail

          echo "🧼 Stopping existing container..."
          docker stop moodyclues-container || true
          docker rm moodyclues-container || true

          echo "🔐 Docker login..."
          echo "${REGISTRY_TOKEN}" | docker login -u "${REGISTRY_USER}" --password-stdin

          echo "🐳 Pulling latest image..."
          docker pull "${REGISTRY_USER}/${IMAGE_NAME}:latest"

          echo "🚀 Starting container..."
          docker run -d --name moodyclues-container -p 8080:8080 "${REGISTRY_USER}/${IMAGE_NAME}:latest"

          echo "✅ Container started. Status:"
          docker ps --filter "name=moodyclues-container" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          EOSSH
